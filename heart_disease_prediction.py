# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MpHShBHXoBU7pYH6loVnPxO2849epDoA

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

#load the csv file to a pandas DataFrame
heart_data=pd.read_csv('/heart_disease_data.csv')

#print first 5 rows of dataset
heart_data.head()

#print last 5 rows of dataset
heart_data.tail()

#no of rows and columns
heart_data.shape

#getting some info about the data
heart_data.info()

#checking for missing values
heart_data.isnull().sum()

#statistical measure of data
heart_data.describe()

#checking the distribution of Target variable
heart_data['target'].value_counts()

"""1--> Defective Heart

0--> Healthy Heart

splitting Features and Target
"""

X=heart_data.drop(columns='target',axis=1)
Y=heart_data['target']
print(X)
print(Y)

"""Splitting data into Training Data and Test data"""

X_train,X_test,Y_train,Y_test =train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""MODEL TRAINING

Logistic Regression
"""

model =LogisticRegression()

#TRIANING THE LOGISTIC REGRESSION MODEL WITH TRIANING DATA
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy on Training data:',training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)
print('Accuracy on Testing data:',test_data_accuracy)

"""Building predicting system"""

input_data =(57,1,0,110,335,0,1,143,1,3,1,1,3)

#change the input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if (prediction[0]==0) :
  print('The person is healthy !')
else:
  print('The person have the threat of Heart Disease')